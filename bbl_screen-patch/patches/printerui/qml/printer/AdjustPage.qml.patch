--- printer_ui-orig/printerui/qml/printer/AdjustPage.qml
+++ printer_ui/printerui/qml/printer/AdjustPage.qml
@@ -1,17 +1,21 @@
 import QtQuick 2.12
 import QtQuick.Shapes 1.12
-
+import QtQuick.Controls 2.12
+import QtQuick.Layouts 1.12
 import UIBase 1.0
 import Printer 1.0
 
 import ".."
 import "qrc:/uibase/qml/widgets"
+import "../X1Plus.js" as X1Plus
 
 Item {
-
     property var heaters: PrintManager.heaters
     property var axisController: PrintManager.axisController
-
+    property var speedValues: [50,100,125,175]
+    property var targetSpeed:100
+    property var curSpeed: X1Plus.Bindings.printSpeed()
+    
     property var speedAdjust: QtObject {
         property string name: "speed"
         property int currentTemp: PrintManager.currentTask.printSpeed
@@ -369,12 +373,14 @@
             if(speedPad.target) {
                 speedPad.target = null
                 // here only when close "speedPad" then upload once the event track msg of "speedMode"
-                EventTrack.itemName = "speedAdjust"
-                EventTrack.extraInfo = {
-                    "control": "Choise",
-                    "currentIndex": speedPad.speedMode,
-                    "currentItemText": PrintManager.currentTask.printSpeedModeStrings[speedPad.speedMode]
-                }
+                // EventTrack.itemName = "speedAdjust"
+                // EventTrack.extraInfo = {
+                //     "control": "Choise",
+                //     "currentIndex": speedPad.speedMode,
+                //     "currentItemText": PrintManager.currentTask.printSpeedModeStrings[speedPad.speedMode]
+                // }
+                PrintManager.currentTask.printSpeed.targetTemp = targetSpeed;
+                X1Plus.Bindings.printStatusActions.setPrintSpeedGcode(targetSpeed);
                 speedPad_close();
             }
             fanPad.target = null
@@ -384,63 +390,373 @@
 
     Rectangle {
         id: speedPad
-        anchors.fill: axisPanel
-        color: "#B20D0F0D"
+        width: 540
+        height: 591
+        color:"#B20D0F0D"
         visible: target != null
-
+        anchors.fill: axisPanel
+        
         property var target: null
-        //property var speeds: [180, 140, 100, 60]
-        //property int speed: speeds[speedMode]
-        property string step: stepBar.steps[speedMode]
-        property alias speedMode: stepBar.step
-
-        onTargetChanged: {
-            if (target != null)
-                speedMode = PrintManager.currentTask.printSpeedMode
-        }
-
-        onSpeedModeChanged: {
-            if (target != null) {
-                PrintManager.currentTask.printSpeedMode = speedMode
-            }
+        property alias speed: slider.value
+        
+        onSpeedChanged:{
+            if (speed < 30 || speed > 180){
+                speed = 100;
+            }
+            targetSpeed = speed;
+        }
+        onTargetChanged:{
+            if (target!=null){
+                speed = targetSpeed;
+            }
+        }
+        function calculateYPosition(value) {
+            var relativePosition = (value - slider.from) / (slider.to - slider.from);
+            return slider.handle.height / 2 + (slider.height - slider.handle.height) * (1 - relativePosition);
         }
-
         Rectangle {
             width: 540
             height: 591
             anchors.centerIn: parent
             radius: 15
             color: Colors.gray_600
-
             MouseArea {
                 anchors.fill: parent
                 onPressed: mouse.accepted = true
             }
-
             Text {
-                x: 50
-                y: 18
-                font: Fonts.body_30
-                color: Colors.gray_300
-                text: qsTr("Printing speed")
-            }
-
-            ZStepBar {
-                id: stepBar
-                width: parent.width - 260
-                x: 160
-                y: 120
-                stepOffset: 127
-                titleOffset: 60
-                barColor: Colors.gray_800
-                thumbIcon: "../../icon/thumb.svg"
-                tipColor: Colors.gray_400
-                titleColor: StateColor {
-                    StateColorItem { color: "brand"; states: StateColor.Checked }
-                    StateColorItem { color: "gray_200"; states: StateColor.Normal }
+                id: title
+                text: qsTr("Print Speed")
+                font.pixelSize: 36
+                color: "white"
+                anchors.horizontalCenter: parent.horizontalCenter
+                anchors.top: parent.top
+                anchors.topMargin: 20
+            }
+            Slider {
+                id: slider
+                orientation: Qt.Vertical
+                from: 30
+                to: 180
+                stepSize: 2
+                value: curSpeed
+                anchors.horizontalCenter: parent.horizontalCenter
+                anchors.top: title.bottom
+                anchors.topMargin: 35
+                height: parent.height - 275
+                width: 40
+                onValueChanged: {
+                    canvas.updateSpeedPositions();
+                    if (!slider.pressed) {
+                        targetSpeed = value;
+                        console.log(targetSpeed,PrintManager.currentTask.printSpeed);
+                    }
+                }
+                background: Rectangle {
+                    id: sliderBackground
+                    height: parent.height
+                    width: 40
+                    anchors.fill: slider
+                    color: "#000000" 
+                    radius: width/2
+                    Rectangle {
+                        id: filledTrack
+                        width: parent.width
+                        height: (slider.height - handle.height/2) * ((slider.value - slider.from) / (slider.to - slider.from))+15
+                        color: Colors.brand
+                        radius:width/2
+                        anchors.bottom: parent.bottom
+                    }
+                } 
+                handle: Rectangle {
+                    
+                    id: handle
+                    y: (slider.height - height) * (1 - ((slider.value - slider.from) / (slider.to - slider.from)))
+                    implicitWidth: 56
+                    implicitHeight: 56
+                    color: slider.pressed ? "#f0f0f0" : "#f6f6f6"
+                    border.color: "black"
+                    anchors.horizontalCenter: parent.horizontalCenter
+                    radius: width / 2
+                }
+            }
+            Rectangle {
+                width: 60
+                height: 60
+                color: "transparent" 
+                border.color: "white"
+                radius: 20 
+                anchors.right: slider.left
+                anchors.rightMargin: 70
+                anchors.verticalCenter: parent.verticalCenter
+                Text {
+                    text: "Â±" + slider.stepSize + "%"
+                    anchors.centerIn: parent
+                    color: "white"
+                    font.pixelSize: 24
+                }
+    
+                MouseArea {
+                    anchors.fill: parent
+                    onClicked: {
+                        slider.stepSize = slider.stepSize === 2 ? 10 : 2;
+                    }
+                }
+            }
+            Text {
+                id: layerLbl
+                text: qsTr("Ramp from:")
+                color: "white"
+                font.pixelSize: 18
+                anchors.left: parent.left
+                anchors.leftMargin: 20
+                anchors.top: slider.top
+                anchors.topMargin:40
+            }
+            Text {
+                id: layernumlbl
+                text: X1Plus.Bindings.layerNum()
+                color: "white"
+                font.pixelSize: 18
+                anchors.left: parent.left
+                anchors.leftMargin: 20
+                anchors.top: layerLbl.bottom
+                anchors.topMargin:25
+            }
+            Text {
+                id: toLayerLbl
+                text: qsTr("Ramp to:")
+                color: "white"
+                font.pixelSize: 18
+                anchors.left: parent.left
+                anchors.leftMargin: 20
+                anchors.top: layernumlbl.bottom
+                anchors.topMargin:25
+            }
+            Text {
+                id: toLayerNumLbl
+                text: X1Plus.Bindings.layerNum() + 10
+                color: "white"
+                font.pixelSize: 18
+                anchors.left: parent.left
+                anchors.leftMargin: 20
+                anchors.top: toLayerLbl.bottom
+                anchors.topMargin:25
+            }
+            Text {
+                id: accLbl
+                text: qsTr("acc_mag ") + X1Plus.GcodeGenerator.speed_interp.acceleration_magnitude( X1Plus.GcodeGenerator.speed_interp.speed_fraction(slider.value)).toFixed(2)
+                color: "white"
+                font.pixelSize: 18
+                anchors.left: parent.left
+                anchors.leftMargin: 20
+                anchors.top: toLayerNumLbl.bottom
+                anchors.topMargin:25
+            }
+            Text {
+                id: rLbl
+                text: qsTr("R ") + X1Plus.GcodeGenerator.speed_interp.speed_fraction(slider.value).toFixed(1)
+                color: "white"
+                font.pixelSize: 18
+                anchors.left: parent.left
+                anchors.leftMargin: 20
+                anchors.top: accLbl.bottom
+                anchors.topMargin:25
+            }
+            Text {
+                id: frlbl
+                text: qsTr("FR ") + X1Plus.GcodeGenerator.speed_interp.feed_rate(slider.value).toFixed(2)
+                color: "white"
+                font.pixelSize: 18
+                anchors.left: parent.left
+                anchors.leftMargin: 20
+                anchors.top: rLbl.bottom
+                anchors.topMargin:25
+            }
+            
+            
+            Text {
+                id: currentSpeedLabel
+                text: qsTr("Current Speed")
+                color: "white"
+                font.pixelSize: 18
+                anchors.right: parent.right
+                anchors.rightMargin: 20
+                anchors.top: slider.top
+                anchors.topMargin:40
+            }
+            Text {
+                id: currentSpeedText
+                text: curSpeed.toFixed(1) + "%"
+                font.pixelSize: 24
+                color: "white"
+                anchors.top: currentSpeedLabel.bottom
+                anchors.right: currentSpeedLabel.right
+                anchors.topMargin: 5
+            }
+            Text {
+                id: targetSpeedLabel
+                text: qsTr("Target Speed")
+                color: "white"
+                font.pixelSize: 18
+                anchors.top: currentSpeedText.bottom
+                anchors.right: currentSpeedText.right
+                anchors.topMargin: 20
+            }
+            Text {
+                id: targetSpeedText
+                text: targetSpeed.toFixed(1).toString() +"%"
+                font.pixelSize: 24
+                color: "white"
+                anchors.top: targetSpeedLabel.bottom
+                anchors.right: targetSpeedLabel.right
+                anchors.topMargin: 5
+            }
+            Text {
+                id: printEtaLabel
+                text: qsTr("Print ETA")
+                color: "white"
+                font.pixelSize: 18
+                anchors.top: targetSpeedText.bottom
+                anchors.right: targetSpeedText.right
+                anchors.topMargin: 20
+            }
+            Text {
+                id: printEtaText
+                text: Printer.durationString(PrintManager.currentTask.remainTime)
+                font.pixelSize: 24
+                color: "white"
+                anchors.top: printEtaLabel.bottom
+                anchors.right: printEtaLabel.right
+                anchors.topMargin: 5
+            }
+            Item {
+                id: buttonsContainer
+                width: parent.width
+                height: 170
+                anchors.horizontalCenter: parent.horizontalCenter
+                anchors.top: slider.bottom
+                anchors.topMargin: 30
+                
+                Row {
+                    spacing: 15 
+                    anchors.horizontalCenter: parent.horizontalCenter             
+                    Rectangle {
+                        id: rampButton
+                        width: 145+70
+                        height: 125
+                        //color: "#00ad42"//"#eb6600"
+                        color: Colors.gray_600
+                        radius: 25
+                        Text {
+                            text: qsTr("Ramp")
+                            anchors.centerIn: parent
+                            color: "white"
+                            font.pixelSize: 30 
+                        }
+
+                        MouseArea {
+                            anchors.fill: parent
+                            onClicked: {
+                                let gcode = X1Plus.GcodeGenerator.GcodeLibrary.macros.rampSpeedLevel(curSpeed,targetSpeed,10);
+                                console.log(gcode);
+                                X1Plus.Bindings.printStatusActions.updateRampStatus(layerNum,10,curSpeed,targetSpeed);
+                            }
+                            onEntered: parent.opacity = 0.8
+                            onExited: parent.opacity = 1.0
+                        }
+                    }
+                    Rectangle {
+                        width: 1
+                        height: 105*.85
+                        anchors.verticalCenter: parent.verticalCenter
+                    }
+                    Rectangle {
+                        id: applyButton
+                        width: 145+70
+                        height: 125
+                        color: Colors.gray_600
+                    // color: "#00ad42"//Colors.gray_300
+                        //border.color: Colors.gray_100
+                        radius: 25
+
+                        Text {
+                            text: qsTr("Apply")
+                            anchors.centerIn: parent
+                            color: "white"
+                            font.pixelSize: 30
+                        
+                        }
+
+                        MouseArea {
+                            anchors.fill: parent
+                            onClicked: {
+                                X1Plus.Bindings.printStatusActions.setPrintSpeedGcode(speedPad.speed);
+                                X1Plus.Bindings.printStatusActions.updatePrintSpeed();
+                                speedPad.target = null;
+                                
+                            }
+                            onEntered: parent.opacity = 0.8
+                            onExited: parent.opacity = 1.0
+                        }
+                    }
+                }
+            }
+            Rectangle {
+                id: labelRect
+                color:"transparent"
+                anchors.fill: slider
+                Repeater {
+                    model: speedValues
+                    delegate: Text {
+                        text: modelData + "%"
+                        color: "white"
+                        font.pixelSize: 24
+                        anchors.right: labelRect.left
+                        anchors.rightMargin: 10
+                        horizontalAlignment: Text.AlignHCenter
+                        verticalAlignment: Text.AlignVCenter
+                        y : speedPad.calculateYPosition(modelData) - height / 2     
+                    }
+                }
+                Canvas {
+                    id: canvas
+                    anchors.fill: parent
+                    property var speedPositions: []
+
+                    function updateSpeedPositions() {
+                        var newPositions = [];
+                        for (var i = 0; i < speedValues.length; i++) {
+                            var yPos = speedPad.calculateYPosition(speedValues[i]);
+                            newPositions.push({ x: slider.width / 2, y: yPos });
+                        }
+                        speedPositions = newPositions;
+                        requestPaint();
+                    }
+    
+                    onPaint: {
+                        var ctx = getContext("2d");
+                        ctx.clearRect(0, 0, width, height); 
+
+                        ctx.shadowOffsetX = 2;
+                        ctx.shadowOffsetY = 2;
+                        ctx.shadowBlur = 4;
+                        ctx.shadowColor = "rgba(0, 0, 0, 0.5)";
+
+                        speedPositions.forEach(function(pos) {
+                            ctx.fillStyle = "#eb6600";
+                            ctx.beginPath();
+                            ctx.arc(pos.x, pos.y, 10, 0, 2 * Math.PI);
+                            ctx.fill();
+                        });
+
+                        ctx.shadowOffsetX = 0;
+                        ctx.shadowOffsetY = 0;
+                        ctx.shadowBlur = 0;
+                        ctx.shadowColor = "transparent";
+                    }
+                    Component.onCompleted: requestPaint()
                 }
-                titleFont: Fonts.body_36
-                steps: PrintManager.currentTask.printSpeedModeStrings
             }
         }
     }
@@ -498,7 +814,7 @@
             EventTrack.itemName: "tempAndSpeed_" + modelData.name
 
             Binding on text {
-               value: speedPad.step
+               value: targetSpeed +"%"
                when: speedPad.target == modelData
             }
 
