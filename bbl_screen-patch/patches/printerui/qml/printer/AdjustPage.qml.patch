--- printer_ui-orig/printerui/qml/printer/AdjustPage.qml
+++ printer_ui/printerui/qml/printer/AdjustPage.qml
@@ -1,17 +1,24 @@
 import QtQuick 2.12
 import QtQuick.Shapes 1.12
-
+import QtQuick.Controls 2.12
+import QtQuick.Layouts 1.12
 import UIBase 1.0
 import Printer 1.0
 
 import ".."
 import "qrc:/uibase/qml/widgets"
+import "../X1Plus.js" as X1Plus
 
 Item {
-
     property var heaters: PrintManager.heaters
     property var axisController: PrintManager.axisController
-
+    property var speedValues: [50,100,125,175]
+    property var speedStr: ["Silent","Normal","Sport","Ludicrous"]
+    property var targetSpeed:100
+    property var currentSpeed: X1Plus.Bindings.printerStatus.currentSpeed(PrintManager)
+    property var isHomed:  X1Plus.Bindings.printerStatus.homeState(PrintManager)
+    property bool ignoreDialog: false
+    
     property var speedAdjust: QtObject {
         property string name: "speed"
         property int currentTemp: PrintManager.currentTask.printSpeed
@@ -20,7 +27,7 @@
         property string errorMsg
         property bool visible: true
     }
-
+    
     property var tempModel: [
         heaters.hotend,
         heaters.heatbed,
@@ -55,7 +62,10 @@
         AxisItem { name: "10"; tip: "plate_down"
             axis: AxisController.AxisZ; dir: AxisController.Increase; unit: AxisController.MM_10}
     }
-
+    Component.onCompleted: {
+        X1Plus.Bindings.printerStatus.updatePrintSpeed();
+        targetSpeed = currentSpeed;
+    }
     MarginPanel {
         id: ctrlPanel
         width: 295
@@ -129,6 +139,7 @@
         }
     }
 
+
     MarginPanel {
         id: axisPanel
         height: parent.height
@@ -149,21 +160,35 @@
                 delegate: axisComp
             }
 
-            ZButton {
+            Rectangle {
                 id: axisHome
                 width: 103
                 height: 103
                 anchors.centerIn: parent
-                type: ZButtonAppearance.Tertiary
-                radius: 44
-                iconSize: 0
-                icon: "../../icon/vector.svg"
-                onClicked: {
-                    axisController.moveCenter(PrintManager.currentTask.stage === PrintTask.PAUSED)
+                radius: width/2
+                color:  "#626260"
+                    ZImage {
+                        id: axisHomeImage
+                        width: 70 
+                        height: 70
+                        anchors.centerIn: parent
+                        fillMode: Image.PreserveAspectFit 
+                        originSource: (isHomed) ? "../../icon/components/home.svg" : "../../icon/vector.svg"
+                        tintColor: (isHomed) ?  Colors.brand : "#eb6600"
+                        Behavior on tintColor {
+                            ColorAnimation { duration: 500 } 
+                        }
+                    }
+                MouseArea {
+                    anchors.fill:parent
+                    onClicked: {
+                        axisController.moveCenter(PrintManager.currentTask.stage === PrintTask.PAUSED)
+                    }
+                    onEntered: axisHome.opacity = 0.8
+                    onExited: axisHome.opacity = 1.0
                 }
             }
         }
-
         Item {
             id: zAxis
             x: 553
@@ -205,7 +230,7 @@
                     }
 
                     onClicked: {
-                        if ((PrintManager.homedState & PrintManager.AXIS_HOMED_ALL) !== PrintManager.AXIS_HOMED_ALL) {
+                        if (!isHomed && !ignoreDialog) {
                             limitFrame()
                         }
                         axisController.moveAxis(modelData.axis, modelData.dir, modelData.unit)
@@ -368,13 +393,7 @@
         onReleased: {
             if(speedPad.target) {
                 speedPad.target = null
-                // here only when close "speedPad" then upload once the event track msg of "speedMode"
-                EventTrack.itemName = "speedAdjust"
-                EventTrack.extraInfo = {
-                    "control": "Choise",
-                    "currentIndex": speedPad.speedMode,
-                    "currentItemText": PrintManager.currentTask.printSpeedModeStrings[speedPad.speedMode]
-                }
+                targetSpeed = X1Plus.Bindings.printSpeed()
                 speedPad_close();
             }
             fanPad.target = null
@@ -384,63 +403,402 @@
 
     Rectangle {
         id: speedPad
-        anchors.fill: axisPanel
-        color: "#B20D0F0D"
+        width: 540
+        height: 591
+        color:"#B20D0F0D"
         visible: target != null
-
+        anchors.fill: axisPanel
         property var target: null
-        //property var speeds: [180, 140, 100, 60]
-        //property int speed: speeds[speedMode]
-        property string step: stepBar.steps[speedMode]
-        property alias speedMode: stepBar.step
-
-        onTargetChanged: {
-            if (target != null)
-                speedMode = PrintManager.currentTask.printSpeedMode
+        property alias speed: dial.value
+        property bool ramping: false
+        property int mode: 0 
+        property real lTemp: 210 
+        function updateDial() {
+            if (mode === 0) {
+                dial.from = 30;
+                dial.to = 180;
+                dial.value = X1Plus.Bindings.printSpeed();
+                title.text = qsTr("Print Speed");
+            }
+            canvas2.requestPaint();
         }
-
-        onSpeedModeChanged: {
-            if (target != null) {
-                PrintManager.currentTask.printSpeedMode = speedMode
+        function closestLevel(value) {
+            var closestIndex = 0; 
+            var minDiff = Math.abs(value - speedValues[0]);
+
+            for (var i = 1; i < speedValues.length; i++) {
+                var diff = Math.abs(value - speedValues[i]);
+                if (diff < minDiff) {
+                    minDiff = diff;
+                    closestIndex = i;
+                }
             }
+            return speedStr[closestIndex];
         }
 
+        onSpeedChanged:{
+            if (target!=null){
+                targetSpeed = speed;
+            }
+        }
+        onTargetChanged:{
+            if (target!=null){
+                speed = targetSpeed;
+                X1Plus.Bindings.printerStatus.updatePrintSpeed();
+                canvas2.requestPaint();
+            } 
+        }
         Rectangle {
             width: 540
             height: 591
             anchors.centerIn: parent
             radius: 15
             color: Colors.gray_600
-
             MouseArea {
                 anchors.fill: parent
                 onPressed: mouse.accepted = true
             }
+            Text {
+                id: title
+                text:qsTr("Print Speed")
+                font.pixelSize: 36
+                color: "white"
+                anchors.horizontalCenter: parent.horizontalCenter
+                anchors.top: parent.top
+                anchors.topMargin: 20
+            }
+            Rectangle {
+                id: modeButton
+                width: 80
+                height: 40
+                color: Colors.gray_600
+                radius: 25
+                anchors.left: title.right
+                anchors.leftMargin: 20
+                anchors.top: title.top
+                visible: false
+                
+                Text {
+                    text: qsTr(" > ")
+                    anchors.centerIn: parent
+                    color: Colors.gray_600
+                    font.pixelSize: 30
+                
+                }
+
+                MouseArea {
+                    anchors.fill: parent
+                    onClicked: {
+                        speedPad.mode += 1;
+                        if (speedPad.mode >=3) speedPad.mode = 0;
+                        speedPad.updateDial();
+                    }
+                    onEntered: parent.opacity = 0.8
+                    onExited: parent.opacity = 1.0
+                }
+            }
+            Dial {
+                id: dial
+                width: 190*1.3
+                height: 190*1.3
+                from: 30
+                to:180
+                value: X1Plus.Bindings.printSpeed()
+                anchors.centerIn: parent
+                stepSize:2
+                Component.onCompleted: {
+                    speedPad.updateDial();
+                }
+                onValueChanged: {
+                    dial.value = Math.round(dial.value / dial.stepSize) * dial.stepSize;
+                    if (speedPad.mode === 0) {
+                        targetSpeed = dial.value;
+                    }
+                }
+                
+                background: Rectangle {
+                    id: background2
+                    implicitWidth: 190*1.3
+                    implicitHeight: 190*1.3
+                    width:implicitWidth
+                    height:implicitHeight
+                    color: "#2F302F"
+                    radius: implicitWidth/2
+                    anchors.fill: parent
+                    
+                    
+                    Canvas {
+                        id: canvas2
+                        anchors.fill: parent
+                        onPaint: {
+                            var ctx = getContext("2d");
+                            var centerX = width / 2;
+                            var centerY = height / 2;
+                            var radius = Math.min(centerX, centerY) - 5; //tick positioning
+                            ctx.clearRect(0, 0, width, height);
+
+                            var startAngle = 130;
+                            var endAngle =270;
+                            var range = dial.to - dial.from;
+                            var stepsize; 
+                          
+                            var stepAngle = (startAngle - endAngle) / range * dial.stepSize;
+                            console.log(stepAngle,startAngle,dial.stepSize,range);
+                            for (var i = 0; i <= range; i += dial.stepSize) {
+                                var angle = (startAngle - i * stepAngle) * Math.PI / 180;
+                                var outerX = centerX + radius * Math.cos(angle);
+                                var outerY = centerY + radius * Math.sin(angle);
+                                var innerX = centerX + (radius - 20) * Math.cos(angle); //adjust tick length
+                                var innerY = centerY + (radius - 20) * Math.sin(angle);
+
+                                ctx.beginPath();
+                                ctx.moveTo(outerX, outerY);
+                                ctx.lineTo(innerX, innerY);
+                                var currentValue = dial.from + i;
+                                if (speedPad.mode == 0) {
+                                    if (currentValue === Math.round(X1Plus.Bindings.printSpeed())){
+                                        ctx.strokeStyle = "#00ff00";
+                                    } else if (currentValue === Math.round(targetSpeed) && speedPad.ramping){
+                                        ctx.strokeStyle = "#FF0000";
+                                    } else {
+                                        ctx.strokeStyle = "#6B6B6A";
+                                    }
+                                }
+                                ctx.lineWidth = 2;
+                                ctx.stroke();
+
+                                if (i % 10 === 0) {// sets number of labels
+                                    var labelRadius = radius -30; //label position
+                                    var labelX = centerX + labelRadius * Math.cos(angle) - 10; 
+                                    var labelY = centerY + labelRadius * Math.sin(angle) + 5;
+                                    
+                                    ctx.fillStyle = "white"//"#6B6B6A"; //label color
+                                    ctx.fillText(currentValue, labelX, labelY);
+                                }
+                            }
+                        }
+                    }
+                }
 
+                handle: Rectangle {
+                    id: hand //dial handle
+                    width: 30
+                    height: 30
+                    radius: 15
+                    color: dial.pressed ?"#4E4F4E": "#3A3B3A" 
+                    border.color: "#eb6600"
+                    border.width: 2
+                    x: background2.x + background2.width / 2 - hand.width / 2
+                    y: background2.y + background2.height / 2 - hand.height / 2
+                     transform: [
+                        Translate {
+                            y: -Math.min(background2.width, background2.height) * 0.5 + hand.height / 2
+                        },
+                        Rotation {
+                            angle: dial.angle
+                            origin.x: hand.width / 2
+                            origin.y: hand.height / 2
+                        }
+                    ]
+                    MouseArea {
+                        id: touchArea
+                        width: parent.width*1.2
+                        height: parent.height*1.2
+                        x: parent.x
+                        y: parent.y
+                        property point handleCenter: Qt.point(hand.x + hand.width / 2, hand.y + hand.height / 2)
+
+                        onPressed: {
+                            var dx = mouse.x - touchArea.handleCenter.x;
+                            var dy = mouse.y - touchArea.handleCenter.y;
+                            dial.angle = Math.atan2(dy, dx) * 180 / Math.PI;
+                        }
+
+                        onPositionChanged: {
+                            if (pressed) {
+                                var dx = mouse.x - touchArea.handleCenter.x;
+                                var dy = mouse.y - touchArea.handleCenter.y;
+                                dial.angle = Math.atan2(dy, dx) * 180 / Math.PI;
+                            }
+                        }
+                    }
+                }
+                
+                Text {
+                    text: qsTr("%1%").arg(dial.value)
+                    color: "white"
+                    font.pixelSize: 24
+                    anchors.bottom: txtParams.top
+                    anchors.bottomMargin: 10
+                    anchors.left: txtParams.left
+                    anchors.leftMargin: 15
+                }
+                
+                Text {
+                    id: txtParams
+                    text:qsTr("Acc Mag: %1\nFeed rate: %2\nR: %3")
+                        .arg(X1Plus.GcodeGenerator.speed_interp.acceleration_magnitude( X1Plus.GcodeGenerator.speed_interp.speed_fraction(dial.value)).toFixed(2))
+                        .arg(X1Plus.GcodeGenerator.speed_interp.feed_rate(dial.value).toFixed(2))
+                        .arg(X1Plus.GcodeGenerator.speed_interp.speed_fraction(dial.value).toFixed(1)) 
+                    color: "white"
+                    font.pixelSize: 14
+                    anchors.centerIn: dial
+                  
+                }
+            }
+          
             Text {
-                x: 50
-                y: 18
-                font: Fonts.body_30
-                color: Colors.gray_300
-                text: qsTr("Printing speed")
+                id: currentSpeedLabel
+                text: speedPad.closestLevel(X1Plus.Bindings.printSpeed())
+                color: "white"
+                font.pixelSize: 18
+                anchors.right: currentSpeedPecentage.left
+                anchors.top:currentSpeedPecentage.top
+                anchors.rightMargin: 20
+                anchors.topMargin:5
             }
+            Text {
+                id: currentSpeedPecentage
+                text:("%1%").arg(X1Plus.Bindings.printSpeed().toFixed(1))
+                color: "white"
+                font.pixelSize: 36
+                anchors.left: parent.left
+                anchors.leftMargin: 120
+                anchors.bottom: dial.top
+                anchors.bottomMargin: 30
+            }
+            
+            Text {
+                id: targetSpeedLabel
+                text: speedPad.closestLevel(dial.value)
+                color: Colors.brand
+                font.pixelSize: 18
+                anchors.left: targetSpeedPercent.right
+                anchors.leftMargin: 20
+                anchors.top:targetSpeedPercent.top
+                anchors.topMargin:5
+            }
+            Text {
+                id: targetSpeedPercent
+                text: ("%1%").arg(targetSpeed.toFixed(1).toString())
+                color: Colors.brand
+                font.pixelSize: 36
+                anchors.right: parent.right
+                anchors.rightMargin: 120
+                anchors.bottom: dial.top
+                anchors.bottomMargin: 30
 
-            ZStepBar {
-                id: stepBar
-                width: parent.width - 260
-                x: 160
-                y: 120
-                stepOffset: 127
-                titleOffset: 60
-                barColor: Colors.gray_800
-                thumbIcon: "../../icon/thumb.svg"
-                tipColor: Colors.gray_400
-                titleColor: StateColor {
-                    StateColorItem { color: "brand"; states: StateColor.Checked }
-                    StateColorItem { color: "gray_200"; states: StateColor.Normal }
+            }   
+            Item {
+                id: buttonsContainer
+                width: parent.width
+                height: 170
+                anchors.horizontalCenter: parent.horizontalCenter
+                anchors.top: dial.bottom
+                anchors.topMargin: 30
+              
+                Row {
+                    spacing: 15 
+                    anchors.horizontalCenter: parent.horizontalCenter      
+                    visible:true       
+                    Rectangle {
+                        id: rampButton
+                        width: 145+70
+                        height: 125
+                        color: (speedPad.ramping) ? "#2F302F": Colors.gray_600
+                        radius: 25
+                
+                        Text {
+                            text: (speedPad.ramping) ? qsTr("Ramp: ON") : qsTr("Ramp: OFF")
+                            anchors.centerIn: parent
+                            color: "white"
+                            font.pixelSize: 30 
+                        }
+                        
+                        MouseArea {
+                            anchors.fill: parent
+                            onClicked: {
+                                speedPad.ramping = !(speedPad.ramping);
+    
+                                let range = Math.abs(X1Plus.Bindings.printSpeed()-targetSpeed);
+                                if (range <=1) return;
+                                let delta = 2;
+                                
+                                canvas2.requestPaint();
+                                if (speedPad.ramping){
+                                    let curr = (X1Plus.emulating) ? 100 : X1Plus.Bindings.layerNum();
+                                    let tot = (X1Plus.emulating) ?  200 : X1Plus.Bindings.totalLayerNum();
+                                    var tar = 0;
+                                    if (curr == tot || tot <= 1){
+                                        speedPad.ramping = false;
+                                        X1Plus.Bindings.printerStatus.updateRamp([]);
+                                        targetSpeed = X1Plus.Bindings.printSpeed();
+                                        return;
+                                    } else {
+                                        for (let i = 0; i < tot; ++i){
+                                           if ((tot - curr) % delta == 0) {
+                                                break;
+                                           } else {
+                                                delta += 1;
+                                           }
+                                        }
+                                        tar = curr + range/delta;
+                                        X1Plus.Bindings.printerStatus.updateRamp(curr,tar,X1Plus.Bindings.printSpeed(),targetSpeed,delta);
+                                        console.log(curr,tar,X1Plus.Bindings.printSpeed(),targetSpeed,delta);
+                                    }
+                                    
+                                }
+                            }
+                           
+                            onEntered: parent.opacity = 0.8
+                            onExited: parent.opacity = 1.0
+                        }
+                    }
+                    Rectangle {
+                        width: 1
+                        height: 105*.85
+                        anchors.verticalCenter: parent.verticalCenter
+                    }
+                    Rectangle {
+                        id: applyButton
+                        width: 145+70
+                        height: 125
+                        color: Colors.gray_600
+                        radius: 25
+
+                        Text {
+                            text: qsTr("Apply")
+                            anchors.centerIn: parent
+                            color: "white"
+                            font.pixelSize: 30
+                        
+                        }
+
+                        MouseArea {
+                            anchors.fill: parent
+                            onClicked: {
+                                if (speedPad.mode == 0){
+                                    X1Plus.Bindings.printerStatus.setPrintSpeedGcode(speedPad.speed);
+                                    PrintManager.currentTask.printSpeed.targetTemp = targetSpeed;
+                                } else if (speedPad.mode == 1){
+                                    var fr = X1Plus.GcodeGenerator.fr.lwpla(speedPad.lTemp);
+                                    let codes = X1Plus.GcodeGenerator.M221(fr.toFixed(2));
+                                    X1Plus.Bindings.heaters.hotend(speedPad.lTemp)
+                                    X1Plus.sendGcode(codes);
+                                    console.log(codes);
+                                } else if (speedPad.mode == 2) {
+                                    let t = speedPad.lTemp
+                                    var fr = X1Plus.GcodeGenerator.fr.lwtpu(t);
+                                    let codes = X1Plus.GcodeGenerator.M221(fr.toFixed(2));
+                                    X1Plus.Bindings.heaters.hotend(t)
+                                    X1Plus.sendGcode(codes);
+                                    console.log(codes);
+                                }
+                                speedPad.target = null;
+                            }
+                        }
+                    }
                 }
-                titleFont: Fonts.body_36
-                steps: PrintManager.currentTask.printSpeedModeStrings
             }
         }
     }
@@ -492,15 +850,21 @@
             textColor: StateColors.get("gray_100")
             textSize: 36
             checked: ListView.isCurrentItem
-            icon: "../../icon/heater_" + modelData.name + ".svg"
-            text: modelData.currentTemp.toFixed(0)
+            icon: (modelData.name == "speed" && speedPad.ramping) ? 
+                                    "../../icon/components/ramp.svg" :
+                                    "../../icon/heater_" + modelData.name + ".svg"
+            text: (modelData.name == "speed" && speedPad.ramping) ? 
+                                    X1Plus.Bindings.printSpeed() + " / " + targetSpeed + "%"  : 
+                                        (modelData.name == "speed" && !speedPad.ramping) ? 
+                                            X1Plus.Bindings.printSpeed() + "%" : 
+                                                modelData.currentTemp.toFixed(0)
 
             EventTrack.itemName: "tempAndSpeed_" + modelData.name
 
-            Binding on text {
-               value: speedPad.step
-               when: speedPad.target == modelData
-            }
+            // Binding on text {
+            //    value: targetSpeed +"%"
+            //    when: speedPad.target == modelData
+            // }
 
             ZText {
                 id: separator
@@ -536,7 +900,7 @@
                 font: Fonts.body_28
                 color: Colors.gray_300
                 visible: index < (tempModel.length - 1) || !speedPad.target
-                text: index < (tempModel.length - 1) ? "°C" : "%"
+                text: index < (tempModel.length - 1) ? "°C" : ""
             }
 
             Item {
@@ -800,7 +1164,7 @@
                 EventTrack.itemName: "bigSector_" + modelData.name
 
                 onClicked: {
-                    if ((PrintManager.homedState & PrintManager.AXIS_HOMED_ALL) != PrintManager.AXIS_HOMED_ALL) {
+                    if (!isHomed && !ignoreDialog) {
                         limitFrame()
                     }
                     axisController.moveAxis(modelData.axis, modelData.dir, AxisController.MM_10)
@@ -818,7 +1182,7 @@
                 EventTrack.itemName: "smallSector_" + modelData.name
 
                 onClicked: {
-                    if ((PrintManager.homedState & PrintManager.AXIS_HOMED_ALL) != PrintManager.AXIS_HOMED_ALL) {
+                    if (!isHomed && !ignoreDialog) {
                         limitFrame()
                     }
                     axisController.moveAxis(modelData.axis, modelData.dir, AxisController.MM)
@@ -873,11 +1237,13 @@
         dialogStack.popupDialog(
                     "TextConfirm", {
                         name: "Limit Frame",
-                        titles: [qsTr("Home"), qsTr("Close")],
+                        type: TextConfirm.YES_NO_CANCEL,
+                        titles: [qsTr("Home"), qsTr("Ignore"), qsTr("Close")],
                         text: qsTr("Before any movement, please home all axes to find the boundary of build volume."),
                         onYes: function() {
                             axisController.moveCenter(PrintManager.currentTask.stage === PrintTask.PAUSED)
-                        }
+                        },
+                        onNo: function() {ignoreDialog = true},
                     })
 
     }
@@ -895,4 +1261,5 @@
                         checkBoxText: qsTr("Don't show again.")
                     })
     }
-}
+
+}
\ No newline at end of file
